// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/018bf/example/internal/app/plan/interceptors (interfaces: PlanUseCase)
//
// Generated by this command:
//
//	mockgen -build_flags=-mod=mod -destination mock/usecase.go . PlanUseCase
//

// Package mock_interceptors is a generated GoMock package.
package mock_interceptors

import (
	context "context"
	reflect "reflect"

	models "github.com/018bf/example/internal/app/plan/models"
	uuid "github.com/018bf/example/internal/pkg/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockPlanUseCase is a mock of PlanUseCase interface.
type MockPlanUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPlanUseCaseMockRecorder
}

// MockPlanUseCaseMockRecorder is the mock recorder for MockPlanUseCase.
type MockPlanUseCaseMockRecorder struct {
	mock *MockPlanUseCase
}

// NewMockPlanUseCase creates a new mock instance.
func NewMockPlanUseCase(ctrl *gomock.Controller) *MockPlanUseCase {
	mock := &MockPlanUseCase{ctrl: ctrl}
	mock.recorder = &MockPlanUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanUseCase) EXPECT() *MockPlanUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPlanUseCase) Create(arg0 context.Context, arg1 *models.PlanCreate) (*models.Plan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPlanUseCaseMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlanUseCase)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPlanUseCase) Delete(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPlanUseCaseMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPlanUseCase)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockPlanUseCase) Get(arg0 context.Context, arg1 uuid.UUID) (*models.Plan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*models.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPlanUseCaseMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPlanUseCase)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockPlanUseCase) List(arg0 context.Context, arg1 *models.PlanFilter) ([]*models.Plan, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.Plan)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPlanUseCaseMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPlanUseCase)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockPlanUseCase) Update(arg0 context.Context, arg1 *models.PlanUpdate) (*models.Plan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*models.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPlanUseCaseMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlanUseCase)(nil).Update), arg0, arg1)
}
