// Code generated by MockGen. DO NOT EDIT.
// Source: post_interfaces.go
//
// Generated by this command:
//
//	mockgen -package=handlers -source=post_interfaces.go -destination=mock.go
//

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	post "github.com/mikalai-mitsin/example/internal/app/posts/entities/post"
	log "github.com/mikalai-mitsin/example/internal/pkg/log"
	uuid "github.com/mikalai-mitsin/example/internal/pkg/uuid"
	fxevent "go.uber.org/fx/fxevent"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockpostUseCase is a mock of postUseCase interface.
type MockpostUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockpostUseCaseMockRecorder
	isgomock struct{}
}

// MockpostUseCaseMockRecorder is the mock recorder for MockpostUseCase.
type MockpostUseCaseMockRecorder struct {
	mock *MockpostUseCase
}

// NewMockpostUseCase creates a new mock instance.
func NewMockpostUseCase(ctrl *gomock.Controller) *MockpostUseCase {
	mock := &MockpostUseCase{ctrl: ctrl}
	mock.recorder = &MockpostUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostUseCase) EXPECT() *MockpostUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockpostUseCase) Create(arg0 context.Context, arg1 post.PostCreate) (post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockpostUseCaseMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockpostUseCase)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockpostUseCase) Delete(arg0 context.Context, arg1 post.PostDelete) (post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockpostUseCaseMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockpostUseCase)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockpostUseCase) Get(arg0 context.Context, arg1 uuid.UUID) (post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockpostUseCaseMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockpostUseCase)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockpostUseCase) List(arg0 context.Context, arg1 post.PostFilter) ([]post.Post, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]post.Post)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockpostUseCaseMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockpostUseCase)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockpostUseCase) Update(arg0 context.Context, arg1 post.PostUpdate) (post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockpostUseCaseMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockpostUseCase)(nil).Update), arg0, arg1)
}

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
	isgomock struct{}
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *Mocklogger) Debug(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockloggerMockRecorder) Debug(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*Mocklogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *Mocklogger) Error(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockloggerMockRecorder) Error(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*Mocklogger)(nil).Error), varargs...)
}

// Fatal mocks base method.
func (m *Mocklogger) Fatal(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockloggerMockRecorder) Fatal(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*Mocklogger)(nil).Fatal), varargs...)
}

// Info mocks base method.
func (m *Mocklogger) Info(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockloggerMockRecorder) Info(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*Mocklogger)(nil).Info), varargs...)
}

// LogEvent mocks base method.
func (m *Mocklogger) LogEvent(event fxevent.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogEvent", event)
}

// LogEvent indicates an expected call of LogEvent.
func (mr *MockloggerMockRecorder) LogEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogEvent", reflect.TypeOf((*Mocklogger)(nil).LogEvent), event)
}

// Logger mocks base method.
func (m *Mocklogger) Logger() *zap.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockloggerMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*Mocklogger)(nil).Logger))
}

// Named mocks base method.
func (m *Mocklogger) Named(name string) log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Named", name)
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// Named indicates an expected call of Named.
func (mr *MockloggerMockRecorder) Named(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Named", reflect.TypeOf((*Mocklogger)(nil).Named), name)
}

// Panic mocks base method.
func (m *Mocklogger) Panic(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panic", varargs...)
}

// Panic indicates an expected call of Panic.
func (mr *MockloggerMockRecorder) Panic(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*Mocklogger)(nil).Panic), varargs...)
}

// Print mocks base method.
func (m *Mocklogger) Print(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Print", varargs...)
}

// Print indicates an expected call of Print.
func (mr *MockloggerMockRecorder) Print(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*Mocklogger)(nil).Print), varargs...)
}

// SetLevel mocks base method.
func (m *Mocklogger) SetLevel(lvl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLevel", lvl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLevel indicates an expected call of SetLevel.
func (mr *MockloggerMockRecorder) SetLevel(lvl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*Mocklogger)(nil).SetLevel), lvl)
}

// Warn mocks base method.
func (m *Mocklogger) Warn(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockloggerMockRecorder) Warn(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*Mocklogger)(nil).Warn), varargs...)
}

// Warning mocks base method.
func (m *Mocklogger) Warning(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warning", varargs...)
}

// Warning indicates an expected call of Warning.
func (mr *MockloggerMockRecorder) Warning(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warning", reflect.TypeOf((*Mocklogger)(nil).Warning), varargs...)
}

// With mocks base method.
func (m *Mocklogger) With(fields ...log.Field) log.Logger {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockloggerMockRecorder) With(fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*Mocklogger)(nil).With), fields...)
}

// WithContext mocks base method.
func (m *Mocklogger) WithContext(ctx context.Context) log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockloggerMockRecorder) WithContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*Mocklogger)(nil).WithContext), ctx)
}
