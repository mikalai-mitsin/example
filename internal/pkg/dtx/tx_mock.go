// Code generated by MockGen. DO NOT EDIT.
// Source: tx.go
//
// Generated by this command:
//
//	mockgen -source=tx.go -package=dtx -destination=tx_mock.go
//

// Package dtx is a generated GoMock package.
package dtx

import (
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTX is a mock of TX interface.
type MockTX struct {
	ctrl     *gomock.Controller
	recorder *MockTXMockRecorder
	isgomock struct{}
}

// MockTXMockRecorder is the mock recorder for MockTX.
type MockTXMockRecorder struct {
	mock *MockTX
}

// NewMockTX creates a new mock instance.
func NewMockTX(ctrl *gomock.Controller) *MockTX {
	mock := &MockTX{ctrl: ctrl}
	mock.recorder = &MockTXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTX) EXPECT() *MockTXMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTX) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTXMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTX)(nil).Commit))
}

// GetSQLTx mocks base method.
func (m *MockTX) GetSQLTx() *sql.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLTx")
	ret0, _ := ret[0].(*sql.Tx)
	return ret0
}

// GetSQLTx indicates an expected call of GetSQLTx.
func (mr *MockTXMockRecorder) GetSQLTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLTx", reflect.TypeOf((*MockTX)(nil).GetSQLTx))
}

// Rollback mocks base method.
func (m *MockTX) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTXMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTX)(nil).Rollback))
}
